  - name: disable dnf nodejs
    ansible.builtin.command: dnf module disable nodejs -y
  - name: enable dnf nodejs
    ansible.builtin.command: dnf module enable nodejs:20 -y
  - name: install nodejs
    ansible.builtin.package:
      name: "{{ item }}"
      state: present
    loop:
    - nodejs
    - mysql
  
  - name: create expende user # user add Expense
    ansible.builtin.user:
      name: expense
  - name: create app directory # create directory
    ansible.builtin.file:
      path: /app
      state: directory
  - name: download backend code #download the file
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip
  - name: unzip backend code # unzip ansible file
    ansible.builtin.unarchive:
      src:  /tmp/backend.zip
      dest: /app 
      remote_src: yes # file is already in remote machine
  - name: install dependencies # NPM install
    community.general.npm:
      path: /app
  - name: copy backend service
    ansible.builtin.copy:
      src: backend.service
      dest: /etc/systemd/system/backend.service

  - name: install python libraries
    ansible.builtin.pip:
     name: "{{ item }}"
     executable: pip3.9
    loop:
    - PyMySQL
    - cryptography
  
  - name: import mysql data
    community.mysql.mysql_db:
      state: import
      name: all
      login_user: "{{ MYSQL_USER }}"
      login_password: "{{ MYSQL_PASSWORD }}"
      login_host: "{{ MYSQL_HOST }}"
      target: /app/schema/backend.sql
  

  - name: daemon reload and restart service
    ansible.builtin.systemd_service: # restart service
      enabled: true
      state: restarted
      daemon_reload: true
      name: backend